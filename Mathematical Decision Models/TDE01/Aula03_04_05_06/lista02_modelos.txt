

Nomes:
	Gustavo Foroutan Raposo
	Gustavo Hammerschmidt
	João Felipe Schwab Teixera de Andrade
	Matheus Wilhelm Siqueira
	Ricardo Naoki Tanji


{Ex.1
	
	Variáveis:

		x1 -> bicicleta
		x2 -> motoreta

		O1 -> oficina 1
		O2 -> oficina 2
	
	Modelo:	

		Max. Lucro(y €) = (30 € * x1) + (40 € * x2)

	Condições:

		(O1 120 h) >= (x1 * 6 h) + (x2 * 4 h)

		(O2 180 h) >= (x1 * 3 h) + (x2 * 1 h)

}


{Ex.2

	Variáveis: 

		x1 -> P1
		x2 -> P2
		x3 -> P3

	Modelo:
		
		Max. Lucro(y u.m.) = (x1 * 33 u.m.) + (x2 * 12 u.m.) + (x3 * 19 u.m.)
	
	Condições: 
		
		x2 = 20
		
		(Frezadoras 500 h.s.) >= (x1 * 9 h) + (x2 * 3 h) + (x3 * 5 h)
		
		(Tornos 350 h.s.) >=  (x1 * 5 h) + (x2 * 4 h) + (x3 * 0 h)
		
		(Furadoras 150 h.s.) >=  (x1 * 3 h) + (x2 * 0 h) + (x3 * 2 h)

}


{Ex.3

	Variáveis:
		
		x1 -> P1
		X2 -> P2

	Modelo:

		Max. Margem Bruta(y €) = (x1 * 6 €) + (x2 * 15 €)

	Condições:

		(Maquina A 39 h) >= (x1 * 0 h) + (x2 * 3 h)
		
		(Maquina B 60 h) >= (x1 * 1.5 h) + (x2 * 4 h)
		
		(Maquina C 57 h) >= (x1 * 2 h) + (x2 * 3 h)
		
		(Maquina D 70 h) >= (x1 * 3 h) + (x2 * 2 h)
		
		(Maquina E 57 h) >= (x1 * 3 h) + (x2 * 0 h)

}


{Ex.4

	Variáveis:

		x1 -> presunto fresco
		x2 -> salpicão fresco
		x3 -> lombo fresco
		x4 -> presunto defumado
		x5 -> salpicão defumado
		x6 -> lombo defumado
		x7 -> presunto defumado extraordinário
		x8 -> salpicão defumado extraordinário
		x9 -> lombo defumado extraordinário
						
	Modelo:

		Max. Lucro(y) = (800 * a) + (400 * b) + (400 * c) +
						(1400 * x4) + (1200 * x5) + (1300 * x6) +
						(1100 * x7) + (700 * x8) + (900 * x9)

	Condições:

		x1 <= 480
		x2 <= 400
		x3 <= 230

		x4 + x7 <= x1
		x5 + x8 <= x2
		x6 + x9 <= x3

		a = x1 - (x4 + x7)
		b = x2 - (x5 + x8)
		c = x3 - (x6 + x9)

		x4 + x5 + x6 <= 420

		x7 + x8 + x9 <= 250

}


{Ex.5
	
	Variáveis:

		x1 -> feijão verde
		x2 -> cenouras
		x3 -> brócolos
		x4 -> couves
		x5 -> nabos
		x6 -> batatas

	Modelo:

		Min. Custo(y $) = ($ 50 * x1) + ($ 50 * x2) + 
						  ($ 80 * x3) + ($ 20 * x4) +
						  ($ 60 * x5) + ($ 30 * x6)

	Condições:

		Ferro 6 mg 		< (x1 * 0.45 mg) + (x2 * 0.45 mg) + (x3 * 1.05 mg) + 
					 	  (x4 * 0.4 mg) + (x5 * 0.5 mg) + (x6 * 0.5 mg)  		

		Fósforo 325 mg 	< (x1 * 10 mg) + (x2 * 28 mg) + (x3 * 50 mg) + 
					 	  (x4 * 25 mg) + (x5 * 22 mg) + (x6 * 75 mg)

		Vit. A 17500 mg < (x1 * 415 mg) + (x2 * 9065 mg) + (x3 * 2550 mg) + 
					 	  (x4 * 75 mg) + (x5 * 15 mg) + (x6 * 235 mg)

		Vit. B 245 mg 	< (x1 * 8 mg) + (x2 * 3 mg) + (x3 * 53 mg) + 
					      (x4 * 27 mg) + (x5 * 5 mg) + (x6 * 8 mg)

		Vit. C 5 mg 	< (x1 * 0.3 mg) + (x2 * 0.35 mg) + (x3 * 0.6 mg) + 
					      (x4 * 0.15 mg) + (x5 * 0.25 mg) + (x6 * 0.8 mg)

		x4 < 3

		Max(x1,x2,x3,x5,x6) < 5

}


{Ex.6

	Variáveis:
	
		x1 -> cevada
		x2 -> amendoim
		x3 -> sésamo

	Modelo:

		Min. Custo(y) = (25 * x1 tonelada) + 
						(41 * x2 tonelada) + 
						(39 * x3 tonelada)

	Condições:	

		(proteína) (0.22*x1 + 0.52*x2 + 0.42*x3) => 0.22 * (x1+x2+x3) toneladas

		(gorduras) (0.02*x1 + 0.02*x2 + 0.10*x3) => 0.036 * (x1+x2+x3) toneladas
	
}


{Ex.7
	
	Variáveis:
	
		x1  -> Fábrica A para o armazém 1
		x2  -> Fábrica B para o armazém 1
		x3  -> Fábrica C para o armazém 1
		x4  -> Fábrica A para o armazém 2
		x5  -> Fábrica B para o armazém 2
		x6  -> Fábrica C para o armazém 2
		x7  -> Fábrica A para o armazém 3
		x8  -> Fábrica B para o armazém 3
		x9  -> Fábrica C para o armazém 3
		x10 -> Fábrica A para o armazém 4
		x11 -> Fábrica B para o armazém 4
		x12 -> Fábrica C para o armazém 4
		x13 -> Fábrica A para o armazém 5
		x14 -> Fábrica B para o armazém 5
		x15 -> Fábrica C para o armazém 5

	Modelo:
	
		Min. Custo(y tonelada) = (x1 * 4) + (x2 * 6) + (x3 * 5) + 
								 (x4 * 1) + (x5 * 4) + (x6 * 2) + 
								 (x7 * 2) + (x8 * 3) + (x9 * 6) + 
								 (x10 * 6) + (x11 * 5) + (x12 * 4) + 
								 (x13 * 9) + (x14 * 7) + (x15 * 8) 
	
	Condições:
	
		x1 + x4 + x7 + x10 + x13 = 100 toneladas
		x2 + x5 + x8 + x11 + x14 = 120 toneladas
		x3 + x6 + x9 + x12 + x15 = 120 toneladas
		
		x1 + x2 + x3 = 40 toneladas
		x4 + x5 + x6 = 50 toneladas
		x7 + x8 + x9 = 70 toneladas
		x10 + x11 + x12 = 90 toneladas
		x13 + x14 + x15 = 90 toneladas

}


{Ex.8

	Variáveis:

		x1 -> fio tipo A
		x2 -> fio tipo B

	Modelo:

		Max. Lucro(y contos) = (5 contos * (x1 / 100 Kg)) +
							   (10 contos * (x2 / 100 Kg))

	Condições:

		x1 >= 3000 Kg

		(x1 / 100 Kg) * 2 h + (x2 / 100 Kg) * 1,5 h <= 15 h
		(x1 / 100 Kg) * 1 h + (x2 / 100 Kg) * 2 h <= 12 h

}


{Ex.9

	Variáveis:

		x1 -> especializado
		x2 -> não especializado
		x3 -> estagiário

	Modelo:

		Max. Prod. diária(y peças/dia) = (x1 * 20 peças) +
										 (x2 * 16 peças) +
										 (x3 * 12 peças)

	Condições:

		(x1 + x2 + x3) * 0.3 <= x1

		x2 <= x3

		x1 <= 4
		x2 <= 7
		x3 <= 9

		(x1 * 8 * 5) + (x2 * 6 * 5) + (x3 * 4 * 5) =< 400 contos/s

		(x1 * 10 a) + (x2 * 6 a) + (x3 * 1 a) => 60 a

}


{Ex.10
	
	Variáveis:

		(produzidas)											|lucro:

		x1 -> armário											|l1 ->	45 u.m.
		x2 -> cômoda											|l2 ->	35 u.m.

		(Compradas)												|lucro:

		x3 -> armário + 1 gaveta grandes 						|l3 ->	41 u.m.	
		x4 -> armário + 2 gavetas grandes						|l4 ->	37 u.m.

		x5 -> cômoda + 1 gaveta grande + 0 gaveta pequena    	|l5 ->	31 u.m.
		x6 -> cômoda + 1 gaveta grande + 1 gaveta pequena		|l6 ->	28 u.m.
		x7 -> cômoda + 1 gaveta grande + 2 gaveta pequena		|l7 ->	25 u.m.

		x8 -> cômoda + 2 gaveta grande + 0 gaveta pequena		|l8 ->	27 u.m.
		x9 -> cômoda + 2 gaveta grande + 1 gaveta pequena		|l9 ->	24 u.m.
		x10 -> cômoda + 2 gaveta grande + 2 gaveta pequena		|l10 ->	21 u.m.
		
		x11 -> cômoda + 3 gaveta grande + 0 gaveta pequena		|l11 ->	23 u.m.
		x12 -> cômoda + 3 gaveta grande + 1 gaveta pequena		|l12 ->	20 u.m.
		x13 -> cômoda + 3 gaveta grande + 2 gaveta pequena		|l13 ->	17 u.m.
		
		x14 -> cômoda + 0 gaveta grande + 1 gaveta pequena		|l14 ->	32 u.m.
		x15 -> cômoda + 0 gaveta grande + 2 gaveta pequena		|l15 ->	29 u.m.
		
		he :: variável declarada em Condições.

	Modelo:

		Max. Lucro(y u.m./s) = ( soma de valores i de 1 a 15 ( xi * li ) u.m. )	- ( he u.m. )

	Condições:

		(s1_t_x1 : seção 1, tempo de x1)

		s1_t_x1 = (6 h + 6 h + 4 h) * x1; s2_t_x1 = (8 h + 6 h + 4 h) * x1;
		s1_t_x2 = (6 h + 6 h + 2 h) * x2; s2_t_x2 = (4 h + 6 h + 4 h) * x2;
		s1_t_x3 = (6 h + 6 h + 2 h) * x3; s2_t_x3 = (8 h + 6 h + 2 h) * x3;
		s1_t_x4 = (6 h + 6 h) * x4; s2_t_x4 = (8 h + 6 h) * x4;
		s1_t_x5 = (6 h + 4 h + 2 h) * x5; s2_t_x5 = (4 h + 4 h + 4 h) * x5;
		s1_t_x6 = (6 h + 4 h + 1 h) * x6; s2_t_x6 = (4 h + 4 h + 2 h) * x6;
		s1_t_x7 = (6 h + 4 h) * x7; s2_t_x7 = (4 h + 4 h) * x7;
		s1_t_x8 = (6 h + 2 h + 2 h) * x8; s2_t_x8 = (4 h + 2 h + 4 h) * x8;
		s1_t_x9 = (6 h + 2 h + 1 h) * x9; s2_t_x9 = (4 h + 2 h + 2 h) * x9;
		s1_t_x10 = (6 h + 2 h) * x10; s2_t_x10 = (4 h + 2 h) * x10;
		s1_t_x11 = (6 h + 2 h) * x11; s2_t_x11 = (4 h + 4 h) * x11;
		s1_t_x12 = (6 h + 1 h) * x12; s2_t_x12 = (4 h + 2 h) * x12;
		s1_t_x13 = (6 h) * x13; s2_t_x13 = (4 h) * x13;
		s1_t_x14 = (6 h + 6 h + 1 h) * x14; s2_t_x14 = (4 h + 6 h + 2 h) * x14;
		s1_t_x15 = (6 h + 6 h) * x15; s2_t_x15 = (4 h + 6 h) * x15;


		soma de valores j de 1 a 15 ( s1_t_xj ) <= 200 h/semana
		
		soma de valores j de 1 a 15 ( s2_t_xj ) <= 230 h/semana [150h + 80h extras]

		a = soma de valores j de 1 a 15 ( s2_t_xj )

		he = (a // 150) * (a - 150)

		(he : horas extras da seção 2)
		|
		|		he_x1 -> soma de valores j de 1 a 15 ( s2_t_xj )
		|
		| ->  ( he_x1 // 150 ) * (he_x1 - 150)
		|
		|	Obs.:
		| 	O operador "//" encontra quantas vezes 150 cabe em he_x1 [quando maior que 150, igual a 1].
		|   Calcula-se então a diferenças de entre as horas extras trabalhadas e desconta-se 1 u.m. para 
		| 	cada hora.

}


{Ex.11
	
	Variáveis:

		x1 -> 22 cm
		x2 -> 20 cm

	Modelo:

		Min. Desperdício(y cm) =  (70 - ( x1 * 2 + x2 * 1 )) * a +
								  (70 - ( x1 * 1 + x2 * 2 )) * b +
								  (70 - ( x1 * 3 )) * c +
								  (70 - ( x2 * 3 )) * d

	Condições:

		(a * 2 + b + c * 3) = 50
		(a + b * 2 + d * 3) = 25
	
	Lógica da fórmula:

		Comb(p=3)
		{
			70 <- 22*3  20 * 0
			  16x	48		0
			
			70 <- 22*2  20 * 1
			  25x	50		25

			70 <- 22*1  20 * 2 
			  12x	12		24

			70 <- 22*0  20 *3 
		       8x	 0	   24
		}

}


{Ex.12

	Variáveis:
		
		x1, x3 -> C
		x2, x4 -> D

	Modelo:

		Max. Produção(y (A+B)) =  a1 + b1 + a2 + b2

	Condições:
		
		(5 a1) + (2 b1) = 1 * x1 + 3 * x2
		(3 a2) + (8 b2) = 4 * x3 + 2 * x4

		a1 + a2 => 200 				||		A => 200

		b1 + b2 => 75				||		B => 75

		1 * x1 + 4 * x3 <= 100		|| 		C <= 100

		3 * x2 + 2 * x4 <= 150		||		D <= 150

}


{Ex.13

	Variáveis:

	    x1 -> Granulado
	    x2 -> Farinha

    Modelo:

	    Min. Custo(y Esc/Kg) =  (x1 * 10 Esc/Kg) + (x2 * 5 Esc/Kg)

    Condições:

        ( ( (x1 * 20) + (x2 * 50) ) / 200 ) => 1.0
        ( ( (x1 * 50) + (x2 * 10) ) / 150 ) => 1.0
        ( ( (x1 * 30) + (x2 * 30) ) / 210 ) => 1.0

}


{Ex.14

	Variáveis:

		x1 -> moradia tipo 1
		x2 -> moradia tipo 2
		x3 -> moradia tipo 3

	Modelo:

		Max. Lucro(y contos) = (x1 * 3000) + (x2 * 2000) + (x3 * 1000)

	Condições:

		( (x1 * 170 m²) + (x2 * 120 m²) ) <= 5100 m²
		
		x3 >= 20

		(x1 * 170 m²) + (x2 * 120 m²) + (x3 * 70 m²) <= (9900 m² - 2000 m²)

}


{Ex.15
	
	Variáveis:

		x1 -> operário 1
		x2 -> operário 2
		x3 -> operário 3
		x4 -> operário 4

		xa -> técnico a
		xb -> técnico b
		xc -> técnico c
		xd -> técnido d

		Afinidade:

				xa	xb  xc 	xd
			x1	1	4	1	4
			x2	4	2	2	1
			x3	5	3	5	1
			x4	1	2	3	1

	Modelo:

		Max. Nota(y) = 	max(
							
							(map ( \x -> soma_array(x) )
								
								(map ( \x -> x $$ [xa, xb, xc, xd] ) 

										( combinações de [1, 2, 3, 4] )
								
								)
		
							)

						)

	Condições:
 
		// Sequências:
		//
		// combinações de [1, 2, 3, 4] ~ [[1,2,3,4], [1,3,2,4], ...]
		//
		// (len([1,2,3,4]))! == len(combinações) == 24	
		// 
		// porque, assim, você consegue, simultaneamente, travar 1 valor por 
		// linha e consegue todas as combinações entre linhas.
		//
		// Cada elemento do modelo por vez:
		//
		// max (map (sum) (map (mult) comb))
		//
		// 1:max (2:map (3:sum) (4:map (5:mult) 6:comb))
		// 
		// 1:max -> encontra o maior valor em um vetor.
		// 2:map -> mapea a função (3:sum) para todos os valores de (4:map).
		// 3:sum -> reduz os vetores dentro de um vetor a sua soma.
		// 4:map -> mapea a função (5:mult) para todos os valores de (6:comb).
		// 5:mult -> multiplica dois vetores da seguinte maneira:
		//		  -> [a, b, c] $$ [d, e, f] == [a * d, b * e, c * f]
		//		  -> x1 $$ xa retorna o valor da afinidade na seção das variáveis.
		// 6:comb -> é o vetor com todos os vetores-combinação dos valores [1,2,3,4].
			
}


{Ex.16

	Variáveis:

		x1 -> anúncio televisão
		x2 -> anúncio radiofônico

	Modelo:

		Max. Lucro(y u.m.) = (a * 6 u.m.) + (b * 2 u.m.)

	Condições:
		
		x1 >= 0
		x2 >= 0

		a = 3 * x1
		b = 2 * x2

		a / 3 = b / 2

		(a * 8 u.m.) + (b * 5 u.m.) <= (58 u.m.)

} 

