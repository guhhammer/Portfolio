

: load map_fold_filter.hs

-- Nome: Gustavo Hammerschmidt.
-- Aula 01 - Haskell

-- \ <- slidebar stands for lambda

-- soma de dois inteiros
soma = \x y -> x + y

-- power
power = \x y -> if y == 0 then 1 else  x * (power x (y-1) ) 

-- factorial
fact = \x acc -> if x == 0 then 1*acc else (fact (x-1) (x*acc))

-- integral
integral :: Float -> Float -> Float -> Float
integral = \lim_A lim_B pcs -> (sum (map (\x -> (x*3)* pcs) [(1-pcs), lim_A .. lim_B]))
                                   -- ver como passar parametro


loop :: Int -> Int
loop n = foldr (\a _ -> 1 - a) 0 [0..n]

integral2 = \k la lb pc  -> (sum (map_ (k*pc) [(1-pc),la .. lb]))